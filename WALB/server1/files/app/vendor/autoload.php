<?php

// Composer autoloader
// This file was generated by Composer

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/composer/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        spl_autoload_register(array('ComposerAutoloaderInit', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(\dirname(__FILE__)));
        spl_autoload_unregister(array('ComposerAutoloaderInit', 'loadClassLoader'));

        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
        if ($useStaticLoader) {
            require_once __DIR__ . '/composer/autoload_static.php';

            call_user_func(\Composer\Autoload\ComposerStaticInit::class.'::getInitializer', $loader);
        } else {
            $map = require __DIR__ . '/composer/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/composer/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/composer/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }

        $loader->register(true);

        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit::$files;
        } else {
            $includeFiles = require __DIR__ . '/composer/autoload_files.php';
        }
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire($fileIdentifier, $file);
        }

        return $loader;
    }
}

/**
 * @param string $fileIdentifier
 * @param string $file
 * @return void
 */
function composerRequire($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;

        require $file;
    }
}

// AWS SDK PHP 수동 로드 (Composer 없이 사용하는 경우)
if (!class_exists('Aws\Sdk')) {
    // AWS SDK를 수동으로 로드하는 간단한 구현
    class AwsSdk {
        public static function createClient($service, $config = []) {
            // 간단한 AWS 클라이언트 mock (실제 사용시 AWS SDK 필요)
            return new class($service, $config) {
                private $service;
                private $config;
                
                public function __construct($service, $config) {
                    $this->service = $service;
                    $this->config = $config;
                }
                
                public function putObject($params) {
                    // S3 putObject mock
                    return [
                        'ObjectURL' => 'https://s3.amazonaws.com/' . $params['Bucket'] . '/' . $params['Key']
                    ];
                }
                
                public function deleteObject($params) {
                    // S3 deleteObject mock
                    return true;
                }
                
                public function getCommand($operation, $params) {
                    // GetCommand mock
                    return new class($operation, $params) {
                        private $operation;
                        private $params;
                        
                        public function __construct($operation, $params) {
                            $this->operation = $operation;
                            $this->params = $params;
                        }
                    };
                }
                
                public function createPresignedRequest($command, $expiration) {
                    // CreatePresignedRequest mock
                    return new class() {
                        public function getUri() {
                            return 'https://s3.amazonaws.com/presigned-url';
                        }
                    };
                }
            };
        }
    }
    
    // AWS 네임스페이스 설정
    if (!class_exists('Aws\S3\S3Client')) {
        class_alias('AwsSdk', 'Aws\S3\S3Client');
    }
}

// Simple Blog App 클래스 autoloader
spl_autoload_register(function ($class) {
    // PSR-4 autoloading for App namespace
    if (strpos($class, 'App\\') === 0) {
        $classPath = str_replace('App\\', '', $class);
        $classPath = str_replace('\\', '/', $classPath);
        $file = __DIR__ . '/../files/app/includes/' . $classPath . '.php';
        
        if (file_exists($file)) {
            require_once $file;
        }
    }
    
    // AWS SDK classes
    if (strpos($class, 'Aws\\') === 0) {
        // AWS SDK autoloading would go here
        // For now, we'll use the mock classes above
        return;
    }
});

// 프로젝트 특화 초기화
if (file_exists(__DIR__ . '/../files/app/includes/functions.php')) {
    // functions.php에서 이 autoload를 require하므로 무한 루프 방지
    if (!defined('AUTOLOAD_LOADED')) {
        define('AUTOLOAD_LOADED', true);
    }
}

return ComposerAutoloaderInit::getLoader();